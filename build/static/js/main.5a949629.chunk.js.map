{"version":3,"sources":["logo.png","App.js","mockAPI.js","backend/utils/authUtils.js","backend/controllers/AuthController.js","backend/controllers/CartController.js","backend/controllers/CategoryController.js","backend/controllers/ProductController.js","backend/controllers/WishlistController.js","backend/db/categories.js","backend/db/products.js","backend/db/users.js","server.js","index.js"],"names":["App","className","src","logo","alt","width","height","href","target","rel","MockAPI","colorScheme","requiresAuth","request","encodedToken","requestHeaders","authorization","decodedToken","jwt_decode","process","REACT_APP_JWT_SECRET","user","this","db","users","findBy","email","_id","Response","errors","formatDate","dayjs","format","sign","require","signupHandler","schema","JSON","parse","requestBody","password","rest","uuid","newUser","createdAt","updatedAt","cart","wishlist","createdUser","create","error","loginHandler","foundUser","undefined","getCartItemsHandler","userId","call","userCart","addItemToCartHandler","product","push","qty","update","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","action","type","forEach","getAllCategoriesHandler","categories","getCategoryHandler","categoryId","category","getAllProductsHandler","products","getProductHandler","getWishlistItemsHandler","userWishlist","addItemToWishlistHandler","removeItemFromWishlistHandler","categoryName","description","title","author","price","firstName","lastName","environment","Server","serializers","application","RestSerializer","models","Model","seeds","server","logging","routes","namespace","post","bind","get","delete","makeServer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a949629.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a4227f29.png\";","import \"./App.css\";\nimport logo from \"./logo.png\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"mockBee logo\" width=\"180\" height=\"180\" />\n        <h1 className=\"brand-title\">\n          Welcome to <span>mockBee!</span>\n        </h1>\n        <p className=\"brand-description\">\n          Get started by editing <code>src/App.js</code>\n        </p>\n        <div className=\"links\">\n          <a\n            href=\"https://mockbee.netlify.app/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Explore mockBee\n          </a>\n          <a\n            href=\"https://mockbee.netlify.app/docs/api/introduction\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            API Documentation\n          </a>\n          <a\n            href=\"https://github.com/neogcamp/mockBee\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Contribute\n          </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport Mockman from \"mockman-js\";\nfunction MockAPI() {\n  return (\n    <div className=\"MockAPI\">\n      <Mockman colorScheme=\"dark\"/>\n    </div>\n  );\n}\n\nexport default MockAPI;","import { Response } from \"miragejs\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const requiresAuth = function (request) {\n  const encodedToken = request.requestHeaders.authorization;\n  const decodedToken = jwt_decode(\n    encodedToken,\n    process.env.REACT_APP_JWT_SECRET\n  );\n  if (decodedToken) {\n    const user = this.db.users.findBy({ email: decodedToken.email });\n    if (user) {\n      return user._id;\n    }\n  }\n  return new Response(\n    401,\n    {},\n    { errors: [\"The token is invalid. Unauthorized access error.\"] }\n  );\n};\n\nexport const formatDate = () => dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");\n","import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, email, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const { email, password, ...rest } = JSON.parse(request.requestBody);\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({ email });\n    if (foundUser) {\n      return new Response(\n        422,\n        {},\n        {\n          errors: [\"Unprocessable Entity. Email Already Exists.\"],\n        }\n      );\n    }\n    const _id = uuid();\n    const newUser = {\n      _id,\n      email,\n      password,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      cart: [],\n      wishlist: [],\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({ _id, email }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, { createdUser, encodedToken });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {email, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const { email, password } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({ email });\n    if (!foundUser) {\n      return new Response(\n        404,\n        {},\n        { errors: [\"The email you entered is not Registered. Not Found error\"] }\n      );\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign(\n        { _id: foundUser._id, email },\n        process.env.REACT_APP_JWT_SECRET\n      );\n      foundUser.password = undefined;\n      return new Response(200, {}, { foundUser, encodedToken });\n    }\n    new Response(\n      401,\n      {},\n      {\n        errors: [\n          \"The credentials you entered are invalid. Unauthorized access error.\",\n        ],\n      }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n","import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\nexport const getCartItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userCart = schema.users.findBy({ _id: userId }).cart;\n  return new Response(200, {}, { cart: userCart });\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { product } = JSON.parse(request.requestBody);\n    userCart.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1,\n    });\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(201, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userCart = schema.users.findBy({ _id: userId }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { action } = JSON.parse(request.requestBody);\n    if (action.type === \"increment\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n","import { Response } from \"miragejs\";\n\n/**\n * All the routes related to Category are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles gets all categories in the db.\n * send GET Request at /api/categories\n * */\n\nexport const getAllCategoriesHandler = function () {\n  try {\n    return new Response(200, {}, { categories: this.db.categories });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles gets all categories in the db.\n * send GET Request at /api/user/category/:categoryId\n * */\n\nexport const getCategoryHandler = function (schema, request) {\n  const categoryId = request.params.categoryId;\n  try {\n    const category = schema.categories.findBy({ _id: categoryId });\n    return new Response(200, {}, { category });\n  } catch (error) {\n    new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n","import { Response } from \"miragejs\";\n\n/**\n * All the routes related to Product are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles gets all products in the db.\n * send GET Request at /api/products\n * */\n\nexport const getAllProductsHandler = function () {\n  return new Response(200, {}, { products: this.db.products });\n};\n\n/**\n * This handler handles gets all products in the db.\n * send GET Request at /api/user/products/:productId\n * */\n\nexport const getProductHandler = function (schema, request) {\n  const productId = request.params.productId;\n  try {\n    const product = schema.products.findBy({ _id: productId });\n    return new Response(200, {}, { product });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n","import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Wishlist are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's wishlist.\n * send GET Request at /api/user/wishlist\n * */\n\nexport const getWishlistItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n  return new Response(200, {}, { wishlist: userWishlist });\n};\n\n/**\n * This handler handles adding items to user's wishlist.\n * send POST Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const addItemToWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const { product } = JSON.parse(request.requestBody);\n    userWishlist.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n    });\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(201, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's wishlist.\n * send DELETE Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const removeItemFromWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const productId = request.params.productId;\n    userWishlist = userWishlist.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(200, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n","import { v4 as uuid } from \"uuid\";\n\n/**\n * Category Database can be added here.\n * You can add category of your wish with different attributes\n * */\n\nexport const categories = [\n  {\n    _id: uuid(),\n    categoryName: \"fiction\",\n    description:\n      \"literature in the form of prose, especially novels, that describes imaginary events and people\",\n  },\n  {\n    _id: uuid(),\n    categoryName: \"non-fiction\",\n    description:\n      \"Non-fiction is writing that gives information or describes real events, rather than telling a story.\",\n  },\n  {\n    _id: uuid(),\n    categoryName: \"horror\",\n    description:\n      \"Meant to cause discomfort and fear for both the character and readers, horror writers often make use of supernatural and paranormal elements in morbid stories that are sometimes a little too realistic.\",\n  },\n];\n","import { v4 as uuid } from \"uuid\";\n\n/**\n * Product Database can be added here.\n * You can add products of your wish with different attributes\n * */\n\nexport const products = [\n  {\n    _id: uuid(),\n    title: \"You Can WIN\",\n    author: \"Shiv Khera\",\n    price: \"5000\",\n    categoryName: \"non-fiction\",\n  },\n  {\n    _id: uuid(),\n    title: \"You are Winner\",\n    author: \"Junaid Qureshi\",\n    price: \"3000\",\n    categoryName: \"horror\",\n  },\n  {\n    _id: uuid(),\n    title: \"Think and Grow Rich\",\n    author: \"Shiv Khera\",\n    price: \"1000\",\n    categoryName: \"fiction\",\n  },\n];\n","import { v4 as uuid } from \"uuid\";\nimport { formatDate } from \"../utils/authUtils\";\n/**\n * User Database can be added here.\n * You can add default users of your wish with different attributes\n * Every user will have cart (Quantity of all Products in Cart is set to 1 by default), wishList by default\n * */\n\nexport const users = [\n  {\n    _id: uuid(),\n    firstName: \"Adarsh\",\n    lastName: \"Balika\",\n    email: \"adarshbalika@gmail.com\",\n    password: \"adarshbalika\",\n    createdAt: formatDate(),\n    updatedAt: formatDate(),\n  },\n];\n","import { Server, Model, RestSerializer } from \"miragejs\";\nimport {\n  loginHandler,\n  signupHandler,\n} from \"./backend/controllers/AuthController\";\nimport {\n  addItemToCartHandler,\n  getCartItemsHandler,\n  removeItemFromCartHandler,\n  updateCartItemHandler,\n} from \"./backend/controllers/CartController\";\nimport {\n  getAllCategoriesHandler,\n  getCategoryHandler,\n} from \"./backend/controllers/CategoryController\";\nimport {\n  getAllProductsHandler,\n  getProductHandler,\n} from \"./backend/controllers/ProductController\";\nimport {\n  addItemToWishlistHandler,\n  getWishlistItemsHandler,\n  removeItemFromWishlistHandler,\n} from \"./backend/controllers/WishlistController\";\nimport { categories } from \"./backend/db/categories\";\nimport { products } from \"./backend/db/products\";\nimport { users } from \"./backend/db/users\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  return new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    models: {\n      product: Model,\n      category: Model,\n      user: Model,\n      cart: Model,\n      wishlist: Model,\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      // disballing console logs from Mirage\n      server.logging = false;\n      products.forEach((item) => {\n        server.create(\"product\", { ...item });\n      });\n\n      users.forEach((item) =>\n        server.create(\"user\", { ...item, cart: [], wishlist: [] })\n      );\n\n      categories.forEach((item) => server.create(\"category\", { ...item }));\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // products routes (public)\n      this.get(\"/products\", getAllProductsHandler.bind(this));\n      this.get(\"/products/:productId\", getProductHandler.bind(this));\n\n      // categories routes (public)\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this));\n\n      // cart routes (private)\n      this.get(\"/user/cart\", getCartItemsHandler.bind(this));\n      this.post(\"/user/cart\", addItemToCartHandler.bind(this));\n      this.post(\"/user/cart/:productId\", updateCartItemHandler.bind(this));\n      this.delete(\n        \"/user/cart/:productId\",\n        removeItemFromCartHandler.bind(this)\n      );\n\n      // wishlist routes (private)\n      this.get(\"/user/wishlist\", getWishlistItemsHandler.bind(this));\n      this.post(\"/user/wishlist\", addItemToWishlistHandler.bind(this));\n      this.delete(\n        \"/user/wishlist/:productId\",\n        removeItemFromWishlistHandler.bind(this)\n      );\n    },\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport MockAPI from \"./mockAPI\";\nimport { makeServer } from \"./server\";\n\n// Call make Server\nmakeServer();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <MockAPI/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}